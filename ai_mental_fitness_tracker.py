# -*- coding: utf-8 -*-
"""AI Mental Fitness Tracker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jL23hox1MdCPsFFtGzhfTobk9NlpdtUe
"""

import warnings
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd

import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

df1=pd.read_csv("/content/mental-and-substance-use-as-share-of-disease.csv")
df2=pd.read_csv("/content/prevalence-by-mental-and-substance-use-disorder.csv")

df1.head()

df2.head()

df=pd.merge(df1,df2)
df.head(10)

df.isnull().sum()

df.info()

df.drop('Code',axis=1,inplace=True)

df.set_axis(['country','Year','Schizophrenia','Bipolar_disorder','Eating_disorder','Anxiety','drug_usage','depression','alcohal','mental_fitness'],axis='columns',inplace=True)

df.describe()

df.head(10)

df.size,df.shape

print(df.duplicated())

print(df.corr())

mean=df['mental_fitness'].mean()
mean

plt.figure(figsize=(12,6))
sns.heatmap(df.corr(),annot=True,cmap='Blues')
plt.plot()

sns.pairplot(df,corner=True)
plt.show()

df['mental_fitness'].plot(kind='hist')
plt.show()

fig=px.pie(df,values='mental_fitness',names='Year')
fig.show()

fig=px.line(df,x='Year',y='mental_fitness',color='country',markers=True,color_discrete_sequence=['red','blue'],template='plotly_dark')
fig.show()

df['country'].unique()

from sklearn.preprocessing import LabelEncoder
l=LabelEncoder()
for i in df.columns:
  if df[i].dtype == 'object':
    df[i]=l.fit_transform(df[i])

df.head()

df.shape

X=df.drop('mental_fitness',axis=1)
y=df['mental_fitness']

from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest = train_test_split(X,y,test_size=.20,random_state=2)

print('xtrain :',xtrain.shape)
print('xtest:', xtest.shape)
print('\n ytrain:',ytrain.shape)
print('ytest:',ytest.shape)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,r2_score
lr=LinearRegression()
lr.fit(xtrain,ytrain)
ytrain_pred=lr.predict(xtrain)
mse=mean_squared_error(ytrain,ytrain_pred)
rmse=(np.sqrt(mean_squared_error(ytrain,ytrain_pred)))
r2=r2_score(ytrain,ytrain_pred)
print("THe Linear Regression model performance for training set")
print("................................")
print("MSE is {}".format(mse))
print("RMSE is {}".format(rmse))
print("R2 score is {}".format(r2))

from sklearn.ensemble import RandomForestRegressor

rf=RandomForestRegressor()
rf.fit(xtrain,ytrain)
ytrain_pred=rf.predict(xtrain)
mse=mean_squared_error(ytrain,ytrain_pred)
rmse=(np.sqrt(mean_squared_error(ytrain,ytrain_pred)))
r2=r2_score(ytrain,ytrain_pred)
print("THe Random Forest Regressor model performance for training set")
print("................................")
print("MSE is {}".format(mse))
print("RMSE is {}".format(rmse))
print("R2 score is {}".format(r2))

ytest_pred=lr.predict(xtest)
mse=mean_squared_error(ytest,ytest_pred)
rmse=(np.sqrt(mean_squared_error(ytest,ytest_pred)))
r2=r2_score(ytest,ytest_pred)
print("THe Linear Regression model performance for testing set")
print("................................")
print("MSE is {}".format(mse))
print("RMSE is {}".format(rmse))
print("R2 score is {}".format(r2))
ytest_pred=rf.predict(xtest)
mse=mean_squared_error(ytest,ytest_pred)
rmse=(np.sqrt(mean_squared_error(ytest,ytest_pred)))
r2=r2_score(ytest,ytest_pred)
print("THe Random Forest Regressor model performance for testing set")
print("................................")
print("MSE is {}".format(mse))
print("RMSE is {}".format(rmse))
print("R2 score is {}".format(r2))

x=df.iloc[:,0:9]
x

y=df.iloc[:,9:]
y

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsRegressor
xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2,random_state=10)
knn_model = KNeighborsRegressor()
knn_model.fit(xtrain, ytrain)
knn_y_pred = knn_model.predict(xtest)
knn_mse = mean_squared_error(ytest, knn_y_pred)
knn_r2 = r2_score(ytest, knn_y_pred)
print("THe Support Vector Regression model performance for testing set")
print("................................")
print("MSE is {}".format(knn_mse))
print("R2 score is {}".format(knn_r2))

from sklearn.svm import SVR
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
svr_model = SVR()
svr_model.fit(X_train, y_train)
svr_y_pred = svr_model.predict(X_test)
svr_mse = mean_squared_error(y_test, svr_y_pred)
svr_r2 = r2_score(y_test, svr_y_pred)
print("THe Support Vector Regression model performance for testing set")
print("................................")
print("MSE is {}".format(svr_mse))
print("R2 score is {}".format(svr_r2))